{"version":3,"sources":["Config/fire.js","Store/Url.js","Components/ImagePredict.jsx","Store/Actioncreator.js","Components/Home.jsx"],"names":["require","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","storage","apiUrl","ImagePredict","props","useState","images","setImages","dispatch","useDispatch","handleUpload","e","i","file","target","files","data","a","type","ActionTypes","uploadTask","ref","name","put","on","snapShot","err","console","log","errmess","then","res","content","child","getDownloadURL","uploadContent","axios","post","response","catch","error","getData","url","pred","temp","slice","Row","className","Col","Table","Header","HeaderCell","Body","map","image","Cell","Input","accept","onChange","Image","src","img","size","Footer","colSpan","Button","floated","icon","labelPosition","primary","onClick","Icon","connect","state","model","Container"],"mappings":"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","file":"static/js/4.bee30906.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nrequire(\"firebase/auth\");\nrequire(\"firebase/database\");\nrequire(\"firebase/storage\");\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAAYmzTCsgF4r9wXv0Tv0GwT3j0mqsM_eQ\",\n  authDomain: \"ir-project-d1527.firebaseapp.com\",\n  projectId: \"ir-project-d1527\",\n  storageBucket: \"ir-project-d1527.appspot.com\",\n  messagingSenderId: \"437213427392\",\n  appId: \"1:437213427392:web:036fad3d28f61d4a481f25\",\n};\n\nconst fire = firebase.initializeApp(firebaseConfig);\n\nexport const storage = firebase.storage();\nexport default fire;\n","export const apiUrl='http://127.0.0.1:5000/'","import { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Col, Row } from \"reactstrap\";\nimport { Button, Icon, Image, Input, Table } from \"semantic-ui-react\";\nimport { getData, uploadContent } from \"../Store/Actioncreator\";\n\nfunction ImagePredict(props) {\n  const [images, setImages] = useState([]);\n  const dispatch = useDispatch();\n  const handleUpload = (e, i) => {\n    const file = e?.target?.files[0];\n    if (file) {\n      const data = {\n        file: file,\n      };\n      dispatch(uploadContent(data)).then((res) => {\n        dispatch(getData({ url: res })).then((pred) => {\n          console.log(pred);\n          let temp = images[i] ?? {};\n          temp[\"img\"] = res;\n          temp[\"data\"] = pred;\n          setImages([...images.slice(0, i), temp, ...images.slice(i + 1)]);\n        });\n      });\n    }\n  };\n\n  const addRow = () => {\n    setImages([...images, {}]);\n  };\n\n  return (\n    <Row className=\" shadow p-3 mt-3 bg-white rounded\">\n      <Col>\n        <Table>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Upload Image</Table.HeaderCell>\n              <Table.HeaderCell>Image</Table.HeaderCell>\n              <Table.HeaderCell>Prediction</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {images.map((image, i) => (\n              <Table.Row key={i}>\n                <Table.Cell>\n                  <Input\n                    type=\"file\"\n                    accept=\"Image/*\"\n                    onChange={(e) => handleUpload(e, i)}\n                  />\n                </Table.Cell>\n                <Table.Cell>\n                  <Image src={image.img} size=\"small\" />\n                </Table.Cell>\n                <Table.Cell>{image.data}</Table.Cell>\n              </Table.Row>\n            ))}\n          </Table.Body>\n          <Table.Footer>\n            <Table.Row>\n              <Table.HeaderCell />\n              <Table.HeaderCell colSpan=\"4\">\n                <Button\n                  floated=\"right\"\n                  icon\n                  labelPosition=\"left\"\n                  primary\n                  size=\"small\"\n                  onClick={addRow}\n                >\n                  <Icon name=\"image\" /> Add Image\n                </Button>\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Footer>\n        </Table>\n        <Button>Next</Button>\n      </Col>\n    </Row>\n  );\n}\n\nexport default ImagePredict;\n","import * as ActionTypes from \"./ActionTypes\";\nimport { storage } from \"../Config/fire\";\nimport axios from \"axios\";\nimport { apiUrl } from \"./Url\";\n\nexport const uploadContent = (data) => {\n  return async (dispatch) => {\n    dispatch({ type: ActionTypes.UPLOAD_REQUEST });\n    const uploadTask = storage.ref(`/${data.file.name}`).put(data.file);\n    uploadTask.on(\n      \"state_changed\",\n      (snapShot) => {},\n      (err) => {\n        console.log(err);\n        dispatch({ type: ActionTypes.UPLOAD_FAILED, errmess: err });\n      },\n      () => {\n        dispatch({ type: ActionTypes.UPLOAD_SUCCESS });\n      }\n    );\n    return await uploadTask.then((res) =>\n      storage.ref(data.content).child(data.file.name).getDownloadURL()\n    );\n  };\n};\n\nexport const getData = (data) => {\n  return async (dispatch) => {\n    dispatch({ type: ActionTypes.DATA_REQUEST });\n    return await axios\n      .post(`${apiUrl}`, data)\n      .then((response) => {\n        dispatch({\n          type: ActionTypes.DATA_SUCCESS,\n          data: response.data.response,\n        });\n        return response.data.response;\n      })\n      .catch((error) => {\n        console.log(error);\n        dispatch({\n          type: ActionTypes.DATA_FAILED,\n          errmess: \"Error in connection with Server\",\n        });\n      });\n  };\n};\n\nexport const getResult = (data) => {\n  return async (dispatch) => {\n    dispatch({ type: ActionTypes.COMPARATOR_REQUEST });\n    return await axios\n      .post(`${apiUrl}comparator`, data)\n      .then((response) => {\n        dispatch({\n          type: ActionTypes.COMPARATOR_SUCCESS,\n          data: response.data,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n        dispatch({\n          type: ActionTypes.COMPARATOR_FAILED,\n          errmess: \"Error in connection with Server\",\n        });\n      });\n  };\n};\n","import { Col, Container, Row } from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport ImagePredict from \"./ImagePredict\";\n\nfunction Home(props) {\n  const res = props.model;\n\n  return (\n    <Container>\n      <Row>\n        <Col className=\"text-center shadow p-3 bg-white mt-3 rounded\">\n          <h1 className=\"text-grad\">Information Retrieval Project</h1>\n          <h2>Recipe Retrieval System</h2>\n        </Col>\n      </Row>\n      <ImagePredict res={res} />\n    </Container>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  model: state.model,\n});\n\nexport default connect(mapStateToProps, null)(Home);\n"],"sourceRoot":""}